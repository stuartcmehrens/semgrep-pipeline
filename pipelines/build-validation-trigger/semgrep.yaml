trigger: none

stages:
  - stage: Semgrep
    pool:
      vmImage: "ubuntu-latest"
    variables:
      - group: semgrep-pipeline-vg
      - name: pullRequestId
        value: $[variables['system.pullRequest.pullRequestId']]
      - name: sourceBranch
        value: $[variables['system.pullRequest.sourceBranch']]
      - name: targetBranch
        value: $[variables['system.pullRequest.targetBranch']]
      - name: sourceCommitId
        value: $[variables['system.pullRequest.sourceCommitId']]
      - name: sourceRepositoryUri
        value: $[variables['system.pullRequest.sourceRepositoryUri']]
      - name: scanningRepositoryName
        value: semgrep-pipelines
      - name: scanningRepositoryPath
        value: $(Agent.BuildDirectory)/$(scanningRepositoryName)
    jobs:
      - job:
        displayName: Semgrep Diff Scan
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            displayName: "Checkout Scanning Repository"
            path: $(scanningRepositoryName)

          - script: |
              echo "getting pr details for pull request id '$(pullRequestId)' and source branch '$(sourceBranch)' targeting '$(targetBranch)' in project '$(System.TeamProject)'."
              json=$(az repos pr list \
                  --project $(System.TeamProject) \
                  --source-branch $(sourceBranch) \
                  --target-branch $(targetBranch) \
                  --query "[?pullRequestId == \`$(pullRequestId)\`]" \
                  | jq -r '.[0]? | { repositoryId: .repository.id, lastMergeTargetCommitId: .lastMergeTargetCommit.commitId }')
              echo "got json: $json"

              # there are ways to do this via a loop or one-liner with jq but for now, we will keep it simple
              REPOSITORY_ID=$(echo $json | jq -r '.repositoryId')
              LAST_MERGE_TARGET_COMMIT_ID=$(echo $json | jq -r '.lastMergeTargetCommitId')

              if [[ -z "$REPOSITORY_ID" ]] || [[ -z "$LAST_MERGE_TARGET_COMMIT_ID" ]]; then
                  echo "repository id '$REPOSITORY_ID' or last merge target commit id '$LAST_MERGE_TARGET_COMMIT_ID' not found for pull request id '$(pullRequestId)' in project '$(System.TeamProject)'."
                  exit 1
              fi

              echo "getting repository details for repository id '$REPOSITORY_ID' in project '$(System.TeamProject)'."
              json=$(az repos list \
                  --project $(System.TeamProject) \
                  --query "[?id=='$REPOSITORY_ID']" \
                  | jq -r '.[0]? | { repositoryName: .name, repositoryWebUrl: .webUrl }')
              echo "got json: $json"

              # there are ways to do this via a loop or one-liner with jq but for now, we will keep it simple
              REPOSITORY_NAME=$(echo $json | jq -r '.repositoryName')
              REPOSITORY_WEB_URL=$(echo $json | jq -r '.repositoryWebUrl')

              if [[ -z "$REPOSITORY_NAME" ]] || [[ -z "$REPOSITORY_WEB_URL" ]]; then
                  echo "repository name '$REPOSITORY_NAME' or repository web url '$REPOSITORY_WEB_URL' not found for pull request id '$(pullRequestId)' in project '$(System.TeamProject)'."
                  exit 1
              fi

              echo "setting environment variables."
              echo "repositoryId: $REPOSITORY_ID"
              echo "lastMergeTargetCommitId: $LAST_MERGE_TARGET_COMMIT_ID"
              echo "repositoryName: $REPOSITORY_NAME"
              echo "repositoryWebUrl: $REPOSITORY_WEB_URL"
              echo "scanTargetPath: $(Agent.BuildDirectory)/$REPOSITORY_NAME"
              echo "##vso[task.setvariable variable=repositoryId]$REPOSITORY_ID"
              echo "##vso[task.setvariable variable=lastMergeTargetCommitId]$LAST_MERGE_TARGET_COMMIT_ID"
              echo "##vso[task.setvariable variable=repositoryName]$REPOSITORY_NAME"
              echo "##vso[task.setvariable variable=repositoryWebUrl]$REPOSITORY_WEB_URL"
              echo "##vso[task.setvariable variable=scanTargetPath]$(Agent.BuildDirectory)/$REPOSITORY_NAME"
            displayName: "Set Environment Variables"
            env:
              AZURE_DEVOPS_EXT_PAT: $(AZURE_TOKEN)

          - script: |
              mkdir -p $(scanTargetPath) && cd $(scanTargetPath)
              git init
              git remote add origin $(sourceRepositoryUri)
              git config gc.auto 0
              git config core.longpaths true
              git config http.version HTTP/1.1
              if [[ "$(USE_PAT_FOR_GIT_AUTH)" == "true" ]]; then
                  echo "Using PAT for authentication with remote repository."
                  ENCODED_PAT=$(echo -n 'u:$(AZURE_TOKEN)' | base64)
                  git config http.$(sourceRepositoryUri).extraheader "AUTHORIZATION: Basic $ENCODED_PAT"
              else
                  echo "Using System.AccessToken for authentication with remote repository."
                  git config http.$(sourceRepositoryUri).extraheader "AUTHORIZATION: bearer $(System.AccessToken)"
              fi

              echo "Last merge target commit id: $(lastMergeTargetCommitId)"
              git fetch --force --tags --prune --prune-tags --progress --no-recurse-submodules origin --depth=1  +$(sourceCommitId):refs/remotes/origin/$(sourceCommitId)
              git fetch --force --tags --prune --prune-tags --progress --no-recurse-submodules origin --depth=1  +$(lastMergeTargetCommitId):refs/remotes/origin/$(lastMergeTargetCommitId)
              git checkout --progress --force refs/remotes/origin/$(sourceCommitId)
              echo "running git clean"
              git clean -ffdx
              echo "running cat-file -e $(lastMergeTargetCommitId) and writing exit code"
              git cat-file -e $(lastMergeTargetCommitId)
              echo $?
            displayName: "Checkout Target Scan Repository"

          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.11"
              addToPath: true
              architecture: "x64"
            displayName: "Use Python 3.11"

          - script: |
              python -m pip install --upgrade pip
              pip install --user pipenv
              pipenv install --ignore-pipfile
            displayName: "Install Python Dependencies"
            workingDirectory: $(scanningRepositoryPath)/scanning

          - script: |
              pipenv run python src/semgrep_scan.py
            displayName: "Run Semgrep Scan"
            workingDirectory: $(scanningRepositoryPath)/scanning
            env:
              PULL_REQUEST_ID: $(pullRequestId)
              REPOSITORY_ID: $(repositoryId)
              REPOSITORY_NAME: $(repositoryName)
              REPOSITORY_DISPLAY_NAME: $(System.TeamProject)/$(repositoryName)
              SCAN_TYPE: diff
              SOURCE_REF_NAME: $(sourceBranch)
              LAST_MERGE_COMMIT_ID: $(sourceCommitId)
              LAST_MERGE_TARGET_COMMIT_ID: $(lastMergeTargetCommitId)
              AZURE_TOKEN: $(AZURE_TOKEN)
              REPOSITORY_PROJECT_NAME: $(System.TeamProject)
              SEMGREP_APP_TOKEN: $(SEMGREP_APP_TOKEN)
              SCAN_TARGET_PATH: $(scanTargetPath)
              REPOSITORY_WEB_URL: $(repositoryWebUrl)
              OUTPUT_DIRECTORY: $(scanningRepositoryPath)/scanning

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(scanningRepositoryPath)/scanning/semgrep-results.json"
              artifact: "semgrep-results"
              publishLocation: "pipeline"
            condition: always()
            displayName: "Publish Semgrep Results"
